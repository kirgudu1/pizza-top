(function(a) {
    if ("function" === typeof define && define.amd) {
        define(["jquery"], a)
    } else {
        a(jQuery)
    }
})(function(c) {
    function b(e, d) {
        var f = function() {};
        f = {
            autoSelectFirst: false,
            appendTo: "body",
            serviceUrl: null,
            lookup: null,
            onSelect: null,
            width: "auto",
            minChars: 1,
            maxHeight: 300,
            deferRequestBy: 0,
            params: {},
            formatResult: b.formatResult,
            delimiter: null,
            zIndex: 9999,
            type: "GET",
            noCache: false,
            onSearchStart: f,
            onSearchComplete: f,
            containerClass: "autocomplete-suggestions",
            tabDisabled: false,
            dataType: "text",
            lookupFilter: function(h, g, i) {
                return -1 !== h.value.toLowerCase().indexOf(i)
            },
            paramName: "query",
            transformResult: function(g) {
                return "string" === typeof g ? c.parseJSON(g) : g
            }
        };
        this.element = e;
        this.el = c(e);
        this.suggestions = [];
        this.badQueries = [];
        this.selectedIndex = -1;
        this.currentValue = this.element.value;
        this.intervalId = 0;
        this.cachedResponse = [];
        this.onChange = this.onChangeInterval = null;
        this.isLocal = this.ignoreValueChange = false;
        this.suggestionsContainer = null;
        this.options = c.extend({}, f, d);
        this.classes = {
            selected: "autocomplete-selected",
            suggestion: "autocomplete-suggestion"
        };
        this.initialize();
        this.setOptions(d)
    }
    var a = {
        extend: function(d, e) {
            return c.extend(d, e)
        },
        createNode: function(d) {
            var e = document.createElement("div");
            e.innerHTML = d;
            return e.firstChild
        }
    };
    b.utils = a;
    c.Autocomplete = b;
    b.formatResult = function(e, d) {
        var f = "(" + d.replace(RegExp("(\\/|\\.|\\*|\\+|\\?|\\||\\(|\\)|\\[|\\]|\\{|\\}|\\\\)", "g"), "\\$1") + ")";
        return e.value.replace(RegExp(f, "gi"), "<strong>$1</strong>")
    };
    b.prototype = {
        killerFn: null,
        initialize: function() {
            var g = this;
            var h = "." + g.classes.suggestion;
            var f = g.classes.selected;
            var e = g.options;
            var d;
            g.element.setAttribute("autocomplete", "off");
            g.killerFn = function(i) {
                if (0 === c(i.target).closest("." + g.options.containerClass).length) {
                    g.killSuggestions();
                    g.disableKillerFn()
                }
            };
            if (!e.width || "auto" === e.width) {
                e.width = g.el.outerWidth()
            }
            g.suggestionsContainer = b.utils.createNode('<div class="' + e.containerClass + '" style="position: absolute; display: none;"></div>');
            d = c(g.suggestionsContainer);
            d.appendTo(e.appendTo).width(e.width);
            d.on("mouseover.autocomplete", h, function() {
                g.activate(c(this).data("index"))
            });
            d.on("mouseout.autocomplete", function() {
                g.selectedIndex = -1;
                d.children("." + f).removeClass(f)
            });
            d.on("click.autocomplete", h, function() {
                g.select(c(this).data("index"), false)
            });
            g.fixPosition();
            if (window.opera) {
                g.el.on("keypress.autocomplete", function(i) {
                    g.onKeyPress(i)
                })
            } else {
                g.el.on("keydown.autocomplete", function(i) {
                    g.onKeyPress(i)
                })
            }
            g.el.on("keyup.autocomplete", function(i) {
                g.onKeyUp(i)
            });
            g.el.on("blur.autocomplete", function() {
                g.onBlur()
            });
            g.el.on("focus.autocomplete", function() {
                g.fixPosition()
            })
        },
        onBlur: function() {
            this.enableKillerFn()
        },
        setOptions: function(e) {
            var d = this.options;
            a.extend(d, e);
            if (this.isLocal = c.isArray(d.lookup)) {
                d.lookup = this.verifySuggestionsFormat(d.lookup)
            }
            c(this.suggestionsContainer).css({
                "max-height": d.maxHeight + "px",
                width: d.width + "px",
                "z-index": d.zIndex
            })
        },
        clearCache: function() {
            this.cachedResponse = [];
            this.badQueries = []
        },
        clear: function() {
            this.clearCache();
            this.currentValue = null;
            this.suggestions = []
        },
        disable: function() {
            this.disabled = true
        },
        enable: function() {
            this.disabled = false
        },
        fixPosition: function() {
            var d;
            if ("body" === this.options.appendTo) {
                d = this.el.offset();
                c(this.suggestionsContainer).css({
                    top: d.top + this.el.outerHeight() + "px",
                    left: d.left + "px"
                })
            }
        },
        enableKillerFn: function() {
            c(document).on("click.autocomplete", this.killerFn)
        },
        disableKillerFn: function() {
            c(document).off("click.autocomplete", this.killerFn)
        },
        killSuggestions: function() {
            var d = this;
            d.stopKillSuggestions();
            d.intervalId = window.setInterval(function() {
                d.hide();
                d.stopKillSuggestions()
            }, 300)
        },
        stopKillSuggestions: function() {
            window.clearInterval(this.intervalId)
        },
        onKeyPress: function(d) {
            if (!this.disabled && (!this.visible && (40 === d.keyCode && this.currentValue))) {
                this.suggest()
            } else {
                if (!this.disabled && this.visible) {
                    switch (d.keyCode) {
                        case 27:
                            this.el.val(this.currentValue);
                            this.hide();
                            break;
                        case 9:
                        case 13:
                            if (-1 === this.selectedIndex) {
                                this.hide();
                                return
                            }
                            this.select(this.selectedIndex, 13 === d.keyCode);
                            if (9 === d.keyCode && false === this.options.tabDisabled) {
                                return
                            }
                            break;
                        case 38:
                            this.moveUp();
                            break;
                        case 40:
                            this.moveDown();
                            break;
                        default:
                            return
                    }
                    d.stopImmediatePropagation();
                    d.preventDefault()
                }
            }
        },
        onKeyUp: function(f) {
            var d = this;
            if (!d.disabled) {
                switch (f.keyCode) {
                    case 38:
                    case 40:
                        return
                }
                clearInterval(d.onChangeInterval);
                if (d.currentValue !== d.el.val()) {
                    if (0 < d.options.deferRequestBy) {
                        d.onChangeInterval = setInterval(function() {
                            d.onValueChange()
                        }, d.options.deferRequestBy)
                    } else {
                        d.onValueChange()
                    }
                }
            }
        },
        onValueChange: function() {
            var d;
            clearInterval(this.onChangeInterval);
            this.currentValue = this.element.value;
            d = this.getQuery(this.currentValue);
            this.selectedIndex = -1;
            if (this.ignoreValueChange) {
                this.ignoreValueChange = false
            } else {
                if (d.length < this.options.minChars) {
                    this.hide()
                } else {
                    this.getSuggestions(d)
                }
            }
        },
        getQuery: function(e) {
            var d = this.options.delimiter;
            if (!d) {
                return c.trim(e)
            }
            e = e.split(d);
            return c.trim(e[e.length - 1])
        },
        getSuggestionsLocal: function(f) {
            var d = f.toLowerCase();
            var e = this.options.lookupFilter;
            return {
                suggestions: c.grep(this.options.lookup, function(g) {
                    return e(g, f, d)
                })
            }
        },
        getSuggestions: function(g) {
            var d;
            var f = this;
            var e = f.options;
            var h = e.serviceUrl;
            if ((d = f.isLocal ? f.getSuggestionsLocal(g) : f.cachedResponse[g]) && c.isArray(d.suggestions)) {
                f.suggestions = d.suggestions;
                f.suggest()
            } else {
                if (!f.isBadQuery(g)) {
                    e.params[e.paramName] = g;
                    if (false !== e.onSearchStart.call(f.element, e.params)) {
                        if (c.isFunction(e.serviceUrl)) {
                            h = e.serviceUrl.call(f.element, g)
                        }
                        c.ajax({
                            url: h,
                            data: e.ignoreParams ? null : e.params,
                            type: e.type,
                            dataType: e.dataType
                        }).done(function(i) {
                            f.processResponse(i, g);
                            e.onSearchComplete.call(f.element, g)
                        })
                    }
                }
            }
        },
        isBadQuery: function(e) {
            var f = this.badQueries;
            var d = f.length;
            for (; d--;) {
                if (0 === e.indexOf(f[d])) {
                    return true
                }
            }
            return false
        },
        hide: function() {
            this.visible = false;
            this.selectedIndex = -1;
            c(this.suggestionsContainer).hide()
        },
        suggest: function() {
            if (0 === this.suggestions.length) {
                this.hide()
            } else {
                var i = this.options.formatResult;
                var h = this.getQuery(this.currentValue);
                var f = this.classes.suggestion;
                var e = this.classes.selected;
                var d = c(this.suggestionsContainer);
                var g = "";
                c.each(this.suggestions, function(k, j) {
                    g += '<li class="' + f + '" data-index="' + k + '"><a href="' + j.href + '" >';
                    if (j.image != "") {
                        g += '<img src="' + j.image + '"/> ';
                    }
                    g += '<span class="suggest_name">'+i(j, h) + '</span>';
					if (j.shopitem) {
						g += '<div class="prices"><span class="price">'+j.price+'</span>';
						if (j.price != j.oldprice) {
							g += '<span class="oldprice">'+j.oldprice+'</span>';
						}
						g += '</div>';
					}
					g +="</a></li>";
                });
                d.html(g).show();
                this.visible = true;
                if (this.options.autoSelectFirst) {
                    this.selectedIndex = 0;
                    d.children().first().addClass(e)
                }
            }
        },
        verifySuggestionsFormat: function(d) {
            return d.length && "string" === typeof d[0] ? c.map(d, function(e) {
                return {
                    value: e,
                    data: null
                }
            }) : d
        },
        processResponse: function(f, e) {
            var g = this.options;
            var d = g.transformResult(f, e);
            d.suggestions = this.verifySuggestionsFormat(d.suggestions);
            if (!g.noCache) {
                this.cachedResponse[d[g.paramName]] = d;
                if (0 === d.suggestions.length) {
                    this.badQueries.push(d[g.paramName])
                }
            }
            if (e === this.getQuery(this.currentValue)) {
                this.suggestions = d.suggestions;
                this.suggest()
            }
        },
        activate: function(f) {
            var g = this.classes.selected;
            var d = c(this.suggestionsContainer);
            var e = d.children();
            d.children("." + g).removeClass(g);
            this.selectedIndex = f;
            return -1 !== this.selectedIndex && e.length > this.selectedIndex ? (f = e.get(this.selectedIndex), c(f).addClass(g), f) : null
        },
        select: function(d, f) {
            var e = this.suggestions[d];
            if (e) {
                this.ignoreValueChange = f;
                this.hide()
            }
        },
        moveUp: function() {
            if (-1 !== this.selectedIndex) {
                if (0 === this.selectedIndex) {
                    c(this.suggestionsContainer).children().first().removeClass(this.classes.selected);
                    this.selectedIndex = -1;
                    this.el.val(this.currentValue)
                } else {
                    this.adjustScroll(this.selectedIndex - 1)
                }
            }
        },
        moveDown: function() {
            if (this.selectedIndex !== this.suggestions.length - 1) {
                this.adjustScroll(this.selectedIndex + 1)
            }
        },
        adjustScroll: function(d) {
            var e = this.activate(d);
            var g;
            var f;
            if (e) {
                e = e.offsetTop;
                g = c(this.suggestionsContainer).scrollTop();
                f = g + this.options.maxHeight - 25;
                if (e < g) {
                    c(this.suggestionsContainer).scrollTop(e)
                } else {
                    if (e > f) {
                        c(this.suggestionsContainer).scrollTop(e - this.options.maxHeight + 25)
                    }
                }
                this.el.val(this.getValue(this.suggestions[d].value))
            }
        },
        onSelect: function(d) {
            var e = this.options.onSelect;
            d = this.suggestions[d];
            this.el.val(this.getValue(d.value));
            if (c.isFunction(e)) {
                e.call(this.element, d)
            }
        },
        getValue: function(e) {
            var g = this.options.delimiter;
            var f;
            if (!g) {
                return e
            }
            f = this.currentValue;
            g = f.split(g);
            return 1 === g.length ? e : f.substr(0, f.length - g[g.length - 1].length) + e
        },
        dispose: function() {
            this.el.off(".autocomplete").removeData("autocomplete");
            this.disableKillerFn();
            c(this.suggestionsContainer).remove()
        }
    };
    c.fn.suggest = function(d, e) {
        return 0 === arguments.length ? this.first().data("autocomplete") : this.each(function() {
            var g = c(this);
            var f = g.data("autocomplete");
            if ("string" === typeof d) {
                if (f && "function" === typeof f[d]) {
                    f[d](e)
                }
            } else {
                if (f) {
                    if (f.dispose) {
                        f.dispose()
                    }
                }
                f = new b(this, d);
                g.data("autocomplete", f)
            }
        })
    }
});